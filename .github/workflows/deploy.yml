#name: Deploy to GitHub Pages
#
#on:
#  push:
#    branches:
#      - main  # 또는 master
#
#jobs:
#  deploy:
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#      pages: write
#      id-token: write
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: Setup Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: '18'  # 최신 LTS 버전 사용
#
#      - name: Cache dependencies
#        uses: actions/cache@v3
#        with:
#          path: ~/.npm
#          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.OS }}-node-
#
#      - name: Install dependencies
#        run: npm install
#
#      - name: Build
#        run: npm run build  # 프로젝트의 빌드 스크립트에 맞게 수정
#
#      - name: Deploy to GitHub Pages
#        uses: peaceiris/actions-gh-pages@v3
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          publish_dir: ./dist  # 빌드 dist 디렉토리에 있다고 가정

jobs:
  # job의 이름 설정
  deploy:
    # 해당 job을 실행하는 운영 체제
    runs-on: ubuntu-latest

    # 수행할 동작 정의
    steps:
      # 1. 저장소 체크아웃
      - name: Checkout source code
        uses: actions/checkout@main

      # 2. node.js 환경설정
      - name: Set up Node.js
        uses: actions/setup-node@main
        with:
          node-version: '18'

      # 3. 패키지 설치
      - name: Install dependencies
        run: npm install

      # 4. 테스트
      - name: Test unit
        run: npm run test:unit

      # 5. 빌드
      - name: Build Page
        run: npm run build
        env:
          NODE_ENV: production

      # 6. gh-pages로 배포
      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist